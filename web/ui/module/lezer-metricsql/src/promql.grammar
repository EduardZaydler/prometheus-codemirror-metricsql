// Copyright 2021 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

@top PromQL { expr }
@top MetricName { Identifier }

@precedence {
  group,
  pow @right,
  mul @left
  add @left,
  eql @left,
  and @left,
  or @left
}

expr[@isGroup=Expr] {
  AggregateExpr |
  BinaryExpr |
  FunctionCall |
  MatrixSelector |
  NumberLiteral |
  OffsetExpr |
  ParenExpr |
  StringLiteral |
  SubqueryExpr |
  UnaryExpr |
  VectorSelector |
  StepInvariantExpr
}

AggregateExpr {
  AggregateOp AggregateModifier FunctionCallBody |
  AggregateOp FunctionCallBody AggregateModifier |
  AggregateOp FunctionCallBody
}

AggregateOp {
  Avg |
  Bottomk |
  Count |
  CountValues |
  Group |
  Max |
  Min |
  Quantile |
  Stddev |
  Stdvar |
  Sum |
  Topk |
  // metricsql
  Any |
  BottomkAvg |
  BottomkMax |
  BottomkMedian |
  BottomkLast |
  BottomkMin |
  Distinct |
  Geomean |
  Histogram |
  Limitk |
  Mad |
  Median |
  Mode |
  OutliersMad |
  Outliersk |
  Quantiles |
  Share |
  Sum2 |
  TopkAvg |
  TopkMax |
  TopkMedian |
  TopkLast |
  TopkMin |
  Zscore
}

AggregateModifier {
  By GroupingLabels |
  Without GroupingLabels
}

BinaryExpr {
  expr !pow Pow    binModifiers expr |
  expr !mul Mul    binModifiers expr |
  expr !mul Div    binModifiers expr |
  expr !mul Mod    binModifiers expr |
  expr !mul Atan2  binModifiers expr |
  expr !add Add    binModifiers expr |
  expr !add Sub    binModifiers expr |
  expr !eql Eql    binModifiers expr |
  expr !eql Gte    binModifiers expr |
  expr !eql Gtr    binModifiers expr |
  expr !eql Lte    binModifiers expr |
  expr !eql Lss    binModifiers expr |
  expr !eql Neq    binModifiers expr |
  expr !and And    binModifiers expr |
  expr !and Unless binModifiers expr |
  expr !or  Or     binModifiers expr
}

MatchingModifierClause {
  (Ignoring | On) GroupingLabels
  ((GroupLeft | GroupRight) (!group GroupingLabels)?)?
}

BoolModifier { Bool }

binModifiers {
  BoolModifier?
  MatchingModifierClause?
}

GroupingLabels {
  "(" (LabelName ("," LabelName)* ","?)? ")"
}

FunctionCall {
  FunctionIdentifier FunctionCallBody
}

FunctionIdentifier {
  AbsentOverTime |
  Absent |
  Abs |
  Acos |
  Acosh |
  Asin |
  Asinh |
  Atan |
  Atanh |
  AvgOverTime |
  Ceil |
  Changes |
  Clamp |
  ClampMax |
  ClampMin |
  Cos |
  Cosh |
  CountOverTime |
  DaysInMonth |
  DayOfMonth |
  DayOfWeek |
  DayOfYear |
  Deg |
  Delta |
  Deriv |
  Exp |
  Floor |
  HistogramCount |
  HistogramFraction |
  HistogramQuantile |
  HistogramStdDev |
  HistogramStdVar |
  HistogramSum |
  HoltWinters |
  Hour |
  Idelta |
  Increase |
  Irate |
  LabelReplace |
  LabelJoin |
  LastOverTime |
  Ln |
  Log10 |
  Log2 |
  MaxOverTime |
  MinOverTime |
  Minute |
  Month |
  Pi |
  PredictLinear |
  PresentOverTime |
  QuantileOverTime |
  Rad |
  Rate |
  Resets |
  Round |
  Scalar |
  Sgn |
  Sin |
  Sinh |
  Sort |
  SortDesc |
  Sqrt |
  StddevOverTime |
  StdvarOverTime |
  SumOverTime |
  Tan |
  Tanh |
  Timestamp |
  Time |
  Vector |
  Year |

  // metricsql
  AggrOverTime |
  Alias |
  AscentOverTime |
  BitmapAnd |
  BitmapOr |
  BitmapXor |
  BucketsLimit |
  ChangesPrometheus |
  CountEqOverTime |
  CountGtOverTime |
  CountLeOverTime |
  CountNeOverTime |
  DecreasesOverTime |
  DefaultRollup |
  DeltaPrometheus |
  DerivFast |
  DescentOverTime |
  DistinctOverTime |
  DropCommonLabels |
  DurationOverTime |
  FirstOverTime |
  GeomeanOverTime |
  HistogramAvg |
  HistogramOverTime |
  HistogramQuantiles |
  HistogramShare |
  HoeffdingBoundLower |
  HoeffdingBoundUpper |
  Ideriv |
  IncreasePrometheus |
  IncreasePure |
  IncreasesOverTime |
  Integrate |
  Interpolate |
  KeepLastValue |
  KeepNextValue |
  LabelCopy |
  LabelDel |
  LabelGraphiteGroup |
  LabelKeep |
  LabelLowercase |
  LabelMap |
  LabelMatch |
  LabelMismatch |
  LabelMove |
  LabelSet |
  LabelTransform |
  LabelUppercase |
  LabelValue |
  Lag |
  Lifetime |
  LimitOffset |
  MadOverTime |
  MedianOverTime |
  ModeOverTime |
  Now |
  PrometheusBuckets |
  QuantilesOverTime |
  Rand |
  RandExponential |
  RandNormal |
  RangeAvg |
  RangeFirst |
  RangeLast |
  RangeLinearRegression |
  RangeMad |
  RangeMax |
  RangeMin |
  RangeNormalize |
  RangeOverTime |
  RangeQuantile |
  RangeStddev |
  RangeStdvar |
  RangeSum |
  RangeTrimOutliers |
  RangeTrimSpikes |
  RangeTrimZscore |
  RangeZscore |
  RateOverSum |
  RemoveResets |
  Rollup |
  RollupCandlestick |
  RollupDelta |
  RollupDeriv |
  RollupIncrease |
  RollupRate |
  RollupScrapeInterval |
  RunningAvg |
  RunningMax |
  RunningMin |
  RunningSum |
  ScrapeInterval |
  ShareEqOverTime |
  ShareGtOverTime |
  ShareLeOverTime |
  SmoothExponential |
  SortByLabel |
  SortByLabelDesc |
  SortByLabelNumeric |
  SortByLabelNumericDesc |
  StaleSamplesOverTime |
  Step |
  Sum2OverTime |
  TfirstOverTime |
  TimestampWithName |
  TimezoneOffset |
  TlastChangeOverTime |
  TlastOverTime |
  TmaxOverTime |
  TminOverTime |
  Union |
  ZscoreOverTime |
  // custom transform function
  AvgDaily |
  MedianDaily |
  AvgWeekly |
  MedianWeekly |
  MedianWeeklyWithTrends
}

FunctionCallBody {
  "(" (expr ("," expr)*)? ")"
}

ParenExpr {
  "(" expr ")"
}

OffsetExpr {
  expr Offset Sub? Duration
}

MatrixSelector {
  // TODO: Can this not be more specific than "expr"?
  expr "[" Duration "]"
}

SubqueryExpr {
  expr "[" Duration ":" ("" | Duration) "]"
}

UnaryExpr {
  !mul UnaryOp~signed expr
}

UnaryOp {
  "-" |
  "+"
}

VectorSelector {
  Identifier LabelMatchers |
  Identifier |
  LabelMatchers
}

LabelMatchers {
  "{" (LabelMatcher ("," LabelMatcher)* ","?)? "}"
}

MatchOp {
  EqlSingle |
  Neq |
  EqlRegex |
  NeqRegex
}

LabelMatcher {
  LabelName MatchOp StringLiteral
}

StepInvariantExpr {
  expr At ( NumberLiteral | AtModifierPreprocessors "(" ")" )
}

AtModifierPreprocessors {
  Start | End
}

NumberLiteral  {
 ("-"|"+")?~signed (number | inf | nan)
}

@skip { whitespace | LineComment }

@tokens {
  whitespace { std.whitespace+ }
  LineComment { "#" ![\n]* }

  number {
      (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? |
      "0x" (std.digit | $[a-fA-F])+
  }
  StringLiteral { // TODO: This is for JS, make this work for PromQL.
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"? |
    "`" ![`]* "`"
  }

  Duration {
    // Each line below is just the same regex repeated over and over, but each time with one of the units made non-optional,
    // to ensure that at least one <number>+<unit> pair is provided and an empty string is not recognized as a valid duration.
    ( ( std.digit+ "y" ) ( std.digit+ "w" )? ( std.digit+ "d" )? ( std.digit+ "h" )? ( std.digit+ "m" )? ( std.digit+ "s" )? ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" ) ( std.digit+ "d" )? ( std.digit+ "h" )? ( std.digit+ "m" )? ( std.digit+ "s" )? ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" )? ( std.digit+ "d" ) ( std.digit+ "h" )? ( std.digit+ "m" )? ( std.digit+ "s" )? ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" )? ( std.digit+ "d" )? ( std.digit+ "h" ) ( std.digit+ "m" )? ( std.digit+ "s" )? ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" )? ( std.digit+ "d" )? ( std.digit+ "h" )? ( std.digit+ "m" ) ( std.digit+ "s" )? ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" )? ( std.digit+ "d" )? ( std.digit+ "h" )? ( std.digit+ "m" )? ( std.digit+ "s" ) ( std.digit+ "ms" )? ) |
    ( ( std.digit+ "y" )? ( std.digit+ "w" )? ( std.digit+ "d" )? ( std.digit+ "h" )? ( std.digit+ "m" )? ( std.digit+ "s" )? ( std.digit+ "ms" ) )
  }
  Identifier { (std.asciiLetter | "_" | ":") (std.asciiLetter | std.digit | "_" | ":" )*}
  LabelName { (std.asciiLetter | "_") (std.asciiLetter | std.digit | "_")* }

  // Operator
  Sub { "-" }
  Add { "+" }
  Mul { "*" }
  Mod { "%" }
  Div { "/" }
  Eql { "==" }
  Neq { "!=" }
  Lte { "<=" }
  Lss { "<" }
  Gte { ">=" }
  Gtr { ">" }
  EqlRegex { "=~" }
  EqlSingle { "=" }
  NeqRegex { "!~" }
  Pow { "^" }

  // Special Modifier
  At { "@" }
}

// Keywords

@external specialize {Identifier} specializeIdentifier from "./tokens" {
  inf,
  nan,
  Bool,
  Ignoring,
  On,
  GroupLeft,
  GroupRight,
  Offset
}

// Contextual keywords

@external extend {Identifier} extendIdentifier from "./tokens" {
  Atan2,
  Avg,
  Bottomk,
  Count,
  CountValues,
  Group,
  Max,
  Min,
  Quantile,
  Stddev,
  Stdvar,
  Sum,
  Topk,
  By,
  Without,
  And,
  Or,
  Unless,
  Start,
  End,
  // metricsql
  Any,
  BottomkAvg,
  BottomkMax,
  BottomkMedian,
  BottomkLast,
  BottomkMin,
  Distinct,
  Geomean,
  Histogram,
  Limitk,
  Mad,
  Median,
  Mode,
  OutliersMad,
  Outliersk,
  Quantiles,
  Share,
  Sum2,
  TopkAvg,
  TopkMax,
  TopkMedian,
  TopkLast,
  TopkMin,
  Zscore
}

@external propSource promQLHighLight from "./highlight"

  // FunctionIdentifier definitions
  Abs { condFn<"abs"> }
  Absent { condFn<"absent"> }
  AbsentOverTime { condFn<"absent_over_time"> }
  Acos { condFn<"acos"> }
  Acosh { condFn<"acosh"> }
  Asin { condFn<"asin"> }
  Asinh { condFn<"asinh">}
  Atan { condFn<"atan"> }
  Atanh { condFn<"atanh">}
  AvgOverTime { condFn<"avg_over_time"> }
  Ceil { condFn<"ceil"> }
  Changes { condFn<"changes"> }
  Clamp { condFn<"clamp"> }
  ClampMax { condFn<"clamp_max"> }
  ClampMin { condFn<"clamp_min"> }
  Cos { condFn<"cos">}
  Cosh { condFn<"cosh">}
  CountOverTime { condFn<"count_over_time"> }
  DaysInMonth { condFn<"days_in_month"> }
  DayOfMonth { condFn<"day_of_month"> }
  DayOfWeek { condFn<"day_of_week"> }
  DayOfYear { condFn<"day_of_year"> }
  Deg { condFn<"deg"> }
  Delta { condFn<"delta"> }
  Deriv { condFn<"deriv"> }
  Exp { condFn<"exp"> }
  Floor { condFn<"floor"> }
  HistogramCount { condFn<"histogram_count"> }
  HistogramFraction { condFn<"histogram_fraction"> }
  HistogramQuantile { condFn<"histogram_quantile"> }
  HistogramStdDev { condFn<"histogram_stddev"> }
  HistogramStdVar { condFn<"histogram_stdvar"> }
  HistogramSum { condFn<"histogram_sum"> }
  HoltWinters { condFn<"holt_winters"> }
  Hour { condFn<"hour"> }
  Idelta { condFn<"idelta"> }
  Increase { condFn<"increase"> }
  Irate { condFn<"irate"> }
  LabelReplace { condFn<"label_replace"> }
  LabelJoin { condFn<"label_join"> }
  LastOverTime {condFn<"last_over_time">}
  Ln { condFn<"ln"> }
  Log10 { condFn<"log10"> }
  Log2 { condFn<"log2"> }
  MaxOverTime { condFn<"max_over_time"> }
  MinOverTime { condFn<"min_over_time"> }
  Minute { condFn<"minute"> }
  Month { condFn<"month"> }
  Pi { condFn<"pi">}
  PredictLinear { condFn<"predict_linear"> }
  PresentOverTime { condFn<"present_over_time"> }
  QuantileOverTime { condFn<"quantile_over_time"> }
  Rad { condFn<"rad"> }
  Rate { condFn<"rate"> }
  Resets { condFn<"resets"> }
  Round { condFn<"round"> }
  Scalar { condFn<"scalar"> }
  Sgn { condFn<"sgn"> }
  Sin { condFn<"sin">}
  Sinh { condFn<"sinh"> }
  Sort { condFn<"sort"> }
  SortDesc { condFn<"sort_desc"> }
  Sqrt { condFn<"sqrt"> }
  StddevOverTime { condFn<"stddev_over_time"> }
  StdvarOverTime { condFn<"stdvar_over_time"> }
  SumOverTime { condFn<"sum_over_time"> }
  Tan { condFn<"tan"> }
  Tanh { condFn<"tanh">}
  Time { condFn<"time"> }
  Timestamp { condFn<"timestamp"> }
  Vector { condFn<"vector"> }
  Year { condFn<"year"> }

  // metricsql
  AggrOverTime { condFn<"aggr_over_time"> }
  Alias { condFn<"alias">}
  AscentOverTime { condFn<"ascent_over_time"> }
  BitmapAnd { condFn<"bitmap_and"> }
  BitmapOr { condFn<"bitmap_or"> }
  BitmapXor { condFn<"bitmap_xor"> }
  BucketsLimit { condFn<"buckets_limit"> }
  ChangesPrometheus { condFn<"changes_prometheus"> }
  CountEqOverTime { condFn<"count_eq_over_time"> }
  CountGtOverTime { condFn<"count_gt_over_time"> }
  CountLeOverTime { condFn<"count_le_over_time"> }
  CountNeOverTime { condFn<"count_ne_over_time"> }
  DecreasesOverTime { condFn<"decreases_over_time"> }
  DefaultRollup { condFn<"default_rollup"> }
  DeltaPrometheus { condFn<"delta_prometheus"> }
  DerivFast { condFn<"deriv_fast"> }
  DescentOverTime { condFn<"descent_over_time"> }
  DistinctOverTime { condFn<"distinct_over_time"> }
  DropCommonLabels { condFn<"drop_common_labels"> }
  DurationOverTime { condFn<"duration_over_time"> }
  FirstOverTime { condFn<"first_over_time"> }
  GeomeanOverTime { condFn<"geomean_over_time"> }
  HistogramAvg { condFn<"histogram_avg"> }
  HistogramOverTime { condFn<"histogram_over_time"> }
  HistogramQuantiles { condFn<"histogram_quantiles"> }
  HistogramShare { condFn<"histogram_share"> }
  HoeffdingBoundLower { condFn<"hoeffding_bound_lower"> }
  HoeffdingBoundUpper { condFn<"hoeffding_bound_upper"> }
  Ideriv { condFn<"ideriv"> }
  IncreasePrometheus { condFn<"increase_prometheus"> }
  IncreasePure { condFn<"increase_pure"> }
  IncreasesOverTime { condFn<"increases_over_time"> }
  Integrate { condFn<"integrate"> }
  Interpolate { condFn<"interpolate"> }
  KeepLastValue { condFn<"keep_last_value"> }
  KeepNextValue { condFn<"keep_next_value"> }
  LabelCopy { condFn<"label_copy"> }
  LabelDel { condFn<"label_del"> }
  LabelGraphiteGroup { condFn<"label_graphite_group"> }
  LabelKeep { condFn<"label_keep"> }
  LabelLowercase { condFn<"label_lowercase"> }
  LabelMap { condFn<"label_map"> }
  LabelMatch { condFn<"label_match"> }
  LabelMismatch { condFn<"label_mismatch"> }
  LabelMove { condFn<"label_move"> }
  LabelSet { condFn<"label_set"> }
  LabelTransform { condFn<"label_transform"> }
  LabelUppercase { condFn<"label_uppercase"> }
  LabelValue { condFn<"label_value"> }
  Lag { condFn<"lag"> }
  Lifetime { condFn<"lifetime"> }
  LimitOffset { condFn<"limit_offset"> }
  MadOverTime { condFn<"mad_over_time"> }
  MedianOverTime { condFn<"median_over_time"> }
  ModeOverTime { condFn<"mode_over_time"> }
  Now { condFn<"now"> }
  PrometheusBuckets { condFn<"prometheus_buckets"> }
  QuantilesOverTime { condFn<"quantiles_over_time"> }
  Rand { condFn<"rand"> }
  RandExponential { condFn<"rand_exponential"> }
  RandNormal { condFn<"rand_normal"> }
  RangeAvg { condFn<"range_avg"> }
  RangeFirst { condFn<"range_first"> }
  RangeLast { condFn<"range_last"> }
  RangeLinearRegression { condFn<"range_linear_regression"> }
  RangeMad { condFn<"range_mad"> }
  RangeMax { condFn<"range_max"> }
  RangeMin { condFn<"range_min"> }
  RangeNormalize { condFn<"range_normalize"> }
  RangeOverTime { condFn<"range_over_time"> }
  RangeQuantile { condFn<"range_quantile"> }
  RangeStddev { condFn<"range_stddev"> }
  RangeStdvar { condFn<"range_stdvar"> }
  RangeSum { condFn<"range_sum"> }
  RangeTrimOutliers { condFn<"range_trim_outliers"> }
  RangeTrimSpikes { condFn<"range_trim_spikes"> }
  RangeTrimZscore { condFn<"range_trim_zscore"> }
  RangeZscore { condFn<"range_zscore"> }
  RateOverSum { condFn<"rate_over_sum"> }
  RemoveResets { condFn<"remove_resets"> }
  Rollup { condFn<"rollup"> }
  RollupCandlestick { condFn<"rollup_candlestick"> }
  RollupDelta { condFn<"rollup_delta"> }
  RollupDeriv { condFn<"rollup_deriv"> }
  RollupIncrease { condFn<"rollup_increase"> }
  RollupRate { condFn<"rollup_rate"> }
  RollupScrapeInterval { condFn<"rollup_scrape_interval"> }
  RunningAvg { condFn<"running_avg"> }
  RunningMax { condFn<"running_max"> }
  RunningMin { condFn<"running_min"> }
  RunningSum { condFn<"running_sum"> }
  ScrapeInterval { condFn<"scrape_interval"> }
  ShareEqOverTime { condFn<"share_eq_over_time"> }
  ShareGtOverTime { condFn<"share_gt_over_time"> }
  ShareLeOverTime { condFn<"share_le_over_time"> }
  SmoothExponential { condFn<"smooth_exponential"> }
  SortByLabel { condFn<"sort_by_label"> }
  SortByLabelDesc { condFn<"sort_by_label_desc"> }
  SortByLabelNumeric { condFn<"sort_by_label_numeric"> }
  SortByLabelNumericDesc { condFn<"sort_by_label_numeric_desc"> }
  StaleSamplesOverTime { condFn<"stale_samples_over_time"> }
  Step { condFn<"step"> }
  Sum2OverTime { condFn<"sum2_over_time"> }
  TfirstOverTime { condFn<"tfirst_over_time"> }
  TimestampWithName { condFn<"timestamp_with_name"> }
  TimezoneOffset { condFn<"timezone_offset"> }
  TlastChangeOverTime { condFn<"tlast_change_over_time"> }
  TlastOverTime { condFn<"tlast_over_time"> }
  TmaxOverTime { condFn<"tmax_over_time"> }
  TminOverTime { condFn<"tmin_over_time"> }
  Union { condFn<"union"> }
  ZscoreOverTime { condFn<"zscore_over_time"> }
  // custom transform function
  AvgDaily { condFn<"avg_daily"> }
  MedianDaily { condFn<"median_daily"> }
  AvgWeekly { condFn<"avg_weekly"> }
  MedianWeekly { condFn<"median_weekly"> }
  MedianWeeklyWithTrends { condFn<"median_weekly_with_trends"> }

// Conditional function names (only parsed as function names when used as such).
condFn<term> { @extend<Identifier, term> }
